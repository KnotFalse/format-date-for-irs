name: Rust Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1.0.8
      with:
        toolchain: stable
        profile: minimal
        override: true
        cache: 'cargo'

    - name: Cache Cargo Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release

    - name: Set Binary Path
      run: echo "BINARY_PATH=target/release/format-date-for-irs${{ matrix.os == 'windows-latest' && '.exe' || '' }}" >> $GITHUB_ENV
      shell: bash

    - name: Set Release Timestamp
      run: echo "RELEASE_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      shell: bash

    - name: Set Tag Timestamp
      run: echo "TAG_TIMESTAMP=$(date -u +'%Y-%m-%dT%H%M%SZ')" >> $GITHUB_ENV
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ env.TAG_TIMESTAMP }}
        release_name: Release ${{ env.RELEASE_TIMESTAMP }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.BINARY_PATH }}
        asset_name: ${{ matrix.os }}-binary${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        asset_content_type: application/octet-stream

# name: Rust Build and Release

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build:
#     name: Build on ${{ matrix.os }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#     steps:
#       - uses: actions/checkout@v4

#       - name: Install Rust
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable
#           profile: minimal
#           override: true

#       - name: Cache Cargo Dependencies
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo/registry
#             ~/.cargo/git
#             target
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

#       - name: Build
#         uses: actions-rs/cargo@v1
#         with:
#           command: build
#           args: --release

#       - name: Print Working Directory (within Build)
#         run: pwd  

#       - name: List Target Build Directory Contents
#         run: |
#           if [[ "$RUNNER_OS" == "Windows" ]]; then 
#             dir target/release 
#           else
#             ls -la target/release 
#           fi
#         shell: bash

#       - name: Set binary path 
#         run: | 
#           if [[ "$RUNNER_OS" == "Windows" ]]; then 
#             echo "BINARY_PATH=target\release\format-date-for-irs.exe" >> $GITHUB_ENV
#           else
#             echo "BINARY_PATH=target/release/format-date-for-irs${{ matrix.os == 'windows-latest' && '.exe' || '' }}" >> $GITHUB_ENV
#           fi 
#         shell: bash 

#       - name: Upload Artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ matrix.os }}-binary
#           path: ${{ env.BINARY_PATH }}

  # create-release-and-upload-assets:
  #   name: Create Release and Upload Assets
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set Tag Timestamp
  #       run: echo "TAG_TIMESTAMP=$(date -u +'%Y-%m-%dT%H%M%SZ')" >> $GITHUB_ENV

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: release-${{ env.TAG_TIMESTAMP }}
  #         release_name: Release ${{ env.TAG_TIMESTAMP }}
  #         draft: false
  #         prerelease: false

  #     - name: Download and Upload Artifact for Ubuntu
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ubuntu-latest-binary
  #     - run: |
  #         echo $(ls -R)
  #         FILE=$(ls format-date-for-irs)
  #         NEW_FILE="format-date-for-irs-${{ matrix.os }}-binary"
  #         mv $FILE $NEW_FILE
  #         echo "Uploading $NEW_FILE"
  #         UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
  #         curl \
  #         -X POST \
  #         -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #         -H "Content-Type: application/octet-stream" \
  #         --data-binary @$NEW_FILE \
  #         "$UPLOAD_URL?name=$(basename $NEW_FILE)&label=$(basename $NEW_FILE)"

  #     - name: Download and Upload Artifact for macOS
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: macos-latest-binary
  #     - run: |
  #         FILE=$(ls format-date-for-irs)
  #         NEW_FILE="format-date-for-irs-${{ matrix.os }}-binary"
  #         mv $FILE $NEW_FILE
  #         echo "Uploading $NEW_FILE"
  #         UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
  #         curl \
  #         -X POST \
  #         -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #         -H "Content-Type: application/octet-stream" \
  #         --data-binary @$NEW_FILE \
  #         "$UPLOAD_URL?name=$(basename $NEW_FILE)&label=$(basename $NEW_FILE)"

  #     - name: Download and Upload Artifact for Windows
  #       run: |
  #         $FILE = Get-ChildItem -Filter format-date-for-irs.exe | Select-Object -First 1 -ExpandProperty Name
  #         Rename-Item -Path $FILE -NewName format-date-for-irs-(${matrix.os}-binary.exe)
  #         echo "Found Windows file: format-date-for-irs-(${matrix.os}-binary.exe)"
  #         echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
  #         curl \
  #           -X POST \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Content-Type: application/octet-stream" \
  #           --data-binary @format-date-for-irs-(${matrix.os}-binary.exe) \
  #           "${{ steps.create_release.outputs.upload_url }}?name=format-date-for-irs-${{ matrix.os }}-binary.exe&label=format-date-for-irs-${{ matrix.os }}-binary.exe"
  #       shell: pwsh
